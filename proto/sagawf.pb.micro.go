// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/sagawf.proto

package sagawf

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Sagawf service

func NewSagawfEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Sagawf service

type SagawfService interface {
	RunWorkflow(ctx context.Context, in *WorkflowRequest, opts ...client.CallOption) (*WorkflowResponse, error)
}

type sagawfService struct {
	c    client.Client
	name string
}

func NewSagawfService(name string, c client.Client) SagawfService {
	return &sagawfService{
		c:    c,
		name: name,
	}
}

func (c *sagawfService) RunWorkflow(ctx context.Context, in *WorkflowRequest, opts ...client.CallOption) (*WorkflowResponse, error) {
	req := c.c.NewRequest(c.name, "Sagawf.RunWorkflow", in)
	out := new(WorkflowResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Sagawf service

type SagawfHandler interface {
	RunWorkflow(context.Context, *WorkflowRequest, *WorkflowResponse) error
}

func RegisterSagawfHandler(s server.Server, hdlr SagawfHandler, opts ...server.HandlerOption) error {
	type sagawf interface {
		RunWorkflow(ctx context.Context, in *WorkflowRequest, out *WorkflowResponse) error
	}
	type Sagawf struct {
		sagawf
	}
	h := &sagawfHandler{hdlr}
	return s.Handle(s.NewHandler(&Sagawf{h}, opts...))
}

type sagawfHandler struct {
	SagawfHandler
}

func (h *sagawfHandler) RunWorkflow(ctx context.Context, in *WorkflowRequest, out *WorkflowResponse) error {
	return h.SagawfHandler.RunWorkflow(ctx, in, out)
}
